djorm-pgarray documentation
===========================
Andrey Antukh, <niwi@niwi.be>
1.3.0.peopledoc

:toc:
:numbered:


Introduction
------------

Django by default, has a large collection of possible types that can be used to define the
model. But sometimes we need to use some more complex types offered by PostgreSQL. In this
case, we will look the integrating of PostgreSQL array with Django.

[WARNING]
====
This package is renamed from *djorm-ext-pgarray* to *djorm-pgarray*.

Api and import statements are not changed. Only python package index toplevel
package name is changed.
====


Requirements
------------

- Python 2.7, 3.4 or 3.5
- Django 1.8 -> 1.11
- Psycopg2 >= 2.5.4


Features
--------

- Shortcut fields for almost all default django field types.
- Django >=1.7 custom lookups for easy querying.
- User defined types support out of the box.
- Multiple dimensions arrays.


User guide
----------

Installation
~~~~~~~~~~~~

The simplest way to install **djorm-pgarray** is using **pip**:

[source, bash]
----
pip install djorm-pgarray
----

Configure
~~~~~~~~~

Nothing to configure, use field as is. How you are using any other django builtin model field.


Quick start
~~~~~~~~~~~

This is a sample definition of model using a ArrayField:

[source, python]
----
from django.db import models
from djorm_pgarray.fields import IntegerArrayField

class Register(models.Model):
    name = models.CharField(max_length=200)
    points = IntegerArrayField()
----


Now, you can use this model and store python native lists on points
field:

[source, pycon]
----
>>> Register.objects.create(points=[1,2,3,4])
<Register: Register object>
>>> obj = Register.objects.get()
>>> obj.points
[1,2,3,4]
----


Arrays with multiple dimensions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PostgreSQL also has support for arrays with multiple dimensions, and you can use
them with **djorm-pgarray**:

.Sample model definition
[source, python]
----
class Filter(models.Model):
    name = models.CharField(max_length=200)
    tag_groups = TextArrayField(dimension=2) # this creates text[][] postgresql field.
----


Now you can store on `Filter.tag_groups` field arrays with two dimensions:

[source, pycon]
----
>>> tag_groups = [["Hello", "World"], ["Hola", "Mundo"]]
>>> Filter.objects.create(tag_groups=tag_groups)
<Filter: Filter object>
----


Not defaultly supported types
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**djorm-pgarray** comes with limited set of supported types, but it can be extended
for use with different types. In this case we go to use bytea arrays.

.Simple model definition
[source, python]
----
class ModelWithBytes(models.Model):
    entries = ArrayField(dbtype="bytea")
----


Now, you can save byte data and retrieve it

[source, pycon]
----
>>> data = [memoryview(b"\x01\x00\x00\x00\x00\x00"),
...         memoryview(b"\x02\x00\x00\x00\x00\x00"),
...         memoryview(b"\x03\x00\x00\x00\x00\x00")]
>>> ModelWithBytes.objects.create(entries=data)
>>> obj = ModelWithBytes.objects.get()
>>> assert obj.entries[0].tobytes() == data[0].tobytes()
----


Querying
~~~~~~~~

Custom lookups for easy querying array fields are only available for
django >= 1.7. For other django versions, `queryset.extra()` should
be used for these purpose.


contains
^^^^^^^^

The contains lookup is overridden on ArrayField. The returned objects will be
those where the values passed are a subset of the data. It uses @> operator:

[source, pycon]
----
>>> Page.objects.create(name="First page", tags=["foo", "bar"])
>>> Page.objects.create(name="Second page", tags=["foo"])
>>> Page.objects.filter(tags__contains=["foo"])
[<Page: First page>, <Page: Second page>]
----


contained_by
^^^^^^^^^^^^

This is the inverse of the contains lookup - the objects returned will be those
where the data is a subset of the values passed. It uses <@ operator:

[source, pycon]
----
>>> Page.objects.create(name="First page", tags=["foo", "bar"])
>>> Page.objects.create(name="Second page", tags=["foo"])
>>> Page.objects.filter(tags__contained_by=["foo", "bar"])
[<Page: First page>, <Page: Second page>]
----


overlap
^^^^^^^

Returns objects where the data shares any results with the values passed.
It uses the && operator:

[source, pycon]
----
>>> Page.objects.create(name="First page", tags=["foo", "bar"])
>>> Page.objects.create(name="Second page", tags=["foo"])
>>> Page.objects.filter(tags__overlap=["foo"])
[<Page: First page>, <Page: Second page>]
----


len
^^^

Returns the length of the array

[source, pycon]
----
>>> Page.objects.create(name="First page", tags=["foo", "bar"])
>>> Page.objects.create(name="Second page", tags=["foo"])
>>> Page.objects.filter(tags__len=1)
[<Page: Second page>]
----


index & slice
^^^^^^^^^^^^^

Allow search by array index:

[source, pycon]
----
>>> Page.objects.create(name="First page", tags=["foo", "bar"])
>>> Page.objects.create(name="Second page", tags=["foo"])
>>> Page.objects.filter(tags__0="foo")
[<Page: First page>, <Page: Second page>]
----


And allow you to take a slice of the array:

[source, pycon]
----
>>> Page.objects.create(name="First page", tags=["foo", "bar"])
>>> Page.objects.create(name="Second page", tags=["foo"])
>>> Page.objects.filter(tags__0_1=["foo"])
[<Page: First page>]
----

Api Reference
-------------

This is a list of available fields:

- `djorm_pgarray.fields.ArrayField` (Generic field)
- `djorm_pgarray.fields.SmallIntegerArrayField`
- `djorm_pgarray.fields.IntegerArrayField`
- `djorm_pgarray.fields.BigIntegerArrayField`
- `djorm_pgarray.fields.FloatArrayField`
- `djorm_pgarray.fields.TextArrayField`
- `djorm_pgarray.fields.DateArrayField`
- `djorm_pgarray.fields.DateTimeArrayField`


`ArrayField`
~~~~~~~~~~~~

Is a generic/base field which inherited by the rest, and accept the following parameters:

- `dbtype`: string that represents the database type
- `dimension`: integer that represents the array dimension
- `type_cast`: function that represents the type cast function.


The rest of ArrayField subclasses are simple aliases with corresponding `dbtype` value.


.[[license]]
License
-------

[source,text]
----
Copyright (c) 2013-2014 Andrey Antukh <niwi@niwi.be>

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
----
